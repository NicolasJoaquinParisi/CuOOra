WAComponent subclass: #AccessComponent	instanceVariableNames: 'username password error textError'	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!AccessComponent methodsFor: 'error handling'!textError: anTextError	textError:= anTextError! !!AccessComponent methodsFor: 'error handling'!error	^ error! !!AccessComponent methodsFor: 'error handling'!error: anError	error:= anError! !!AccessComponent methodsFor: 'error handling'!textError	^textError! !!AccessComponent methodsFor: 'rendering'!renderButtonsOn: aCanvas	self subclassResponsibility! !!AccessComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/3/2021 21:22'!renderHeadingOn: aCanvas	aCanvas div		class: 'header';		with: [ aCanvas heading				level: 1;				with: 'CuOOra' ].	aCanvas horizontalRule! !!AccessComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 12:16'!renderInputElementsOn: aCanvas	aCanvas div		class: 'form-fieldset form-group row';		with: [ aCanvas label: 'Usuario'.			aCanvas textInput on: #username of: self ].	aCanvas div		class: 'form-group row';		with: [ aCanvas label: 'Contrase√±a'.			aCanvas passwordInput on: #password of: self ]! !!AccessComponent methodsFor: 'rendering'!renderContentOn: aCanvas	self error ifNil: [ error := false ].	self renderHeadingOn: aCanvas.	aCanvas div		class: 'form-login';		with: [ aCanvas				form: [ aCanvas div						class: 'fieldset';						with: [ aCanvas fieldSet: [ self renderInputElementsOn: aCanvas ] ].					self error						ifTrue: [ aCanvas paragraph class:'error'; with: self textError.							error := false ].					self renderButtonsOn: aCanvas ] ]! !!AccessComponent methodsFor: 'accessing'!model ^ CuOOra soleInstance! !!AccessComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 13:50'!password	^ password! !!AccessComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 13:51'!username: anUsername	username := anUsername! !!AccessComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 13:50'!username	^ username! !!AccessComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 13:50'!password: aPassword	password := aPassword! !!AccessComponent methodsFor: 'private' stamp: 'NicolsJoaqunParisi 4/11/2021 13:50'!access: anUser	self session user: anUser.	self call: HomeComponent new! !!AccessComponent methodsFor: 'private'!style	^ '@import url(''https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap'');html {	font-family: ''Lato'', sans-serif;}.header{	padding-left:5%;   margin-bottom:3%;}.form-login {	width:50%;	margin:auto;	font-size:1.3em}.form-login div {	margin-bottom:4%}.form-login label{   margin-left:1%}.form-login input {	width:75%;   float:right;    height:30px}.form-login .btn { 	width: 50%;	height: 50px; }.form-login .error{color:red;text-align:center}.buttons-container { 	display: flex;	justify-content: space-between;}.buttons-container .btn { 	width: 40%;	height: 50px; }.btn {	background-color:#0474fc;	height:40px;	font-size:16px;	color:white;	font-family: ''Lato'', sans-serif;}.btn:hover { 	background-color: #FFFFFF;   color: #0474fc;}.header-button { 	background-color: white;	color: #0474fc;	height:40px;	font-size:16px;	border-style: none;	font-family: ''Lato'', sans-serif;}.header-button:hover { 	color: #757575;}.header-button:focus {	outline: none;}.login-header { 	display:flex;	flex-direction:row;	justify-content:space-between;	margin-right: 5%;}.login-header-btn-registrar { 	margin-top: 1%;	padding: 0 50%;}.form-fieldset { 	padding-top: 2%;}.fieldset { 	margin: 5% 0;}.topicos-cargados {	width: 50%;	align-items: center;}.topicos-cargados fieldset {	width: 50%;}.topicos-cargados label { 	width: 20%;}.topicos-cargados fieldset input {	width: 15%;	margin-top: 1%;}.rowDescription { 	display: flex;	align-items: top;	justify-content: space-between;}textarea {	width: 75%;	height: 150px;   resize: none;}/*!! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css *//* Document   ========================================================================== *//** * 1. Correct the line height in all browsers. * 2. Prevent adjustments of font size after orientation changes in iOS. */html {  line-height: 1.15; /* 1 */  -webkit-text-size-adjust: 100%; /* 2 */}/* Sections   ========================================================================== *//** * Remove the margin in all browsers. */body {  margin: 0;}/** * Render the `main` element consistently in IE. */main {  display: block;}/** * Correct the font size and margin on `h1` elements within `section` and * `article` contexts in Chrome, Firefox, and Safari. */h1 {  font-size: 2em;  margin: 0.67em 0;}/* Grouping content   ========================================================================== *//** * 1. Add the correct box sizing in Firefox. * 2. Show the overflow in Edge and IE. */hr {  box-sizing: content-box; /* 1 */  height: 0; /* 1 */  overflow: visible; /* 2 */}/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */pre {  font-family: monospace, monospace; /* 1 */  font-size: 1em; /* 2 */}/* Text-level semantics   ========================================================================== *//** * Remove the gray background on active links in IE 10. */a {  background-color: transparent;}/** * 1. Remove the bottom border in Chrome 57- * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. */abbr[title] {  border-bottom: none; /* 1 */  text-decoration: underline; /* 2 */  text-decoration: underline dotted; /* 2 */}/** * Add the correct font weight in Chrome, Edge, and Safari. */b,strong {  font-weight: bolder;}/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */code,kbd,samp {  font-family: monospace, monospace; /* 1 */  font-size: 1em; /* 2 */}/** * Add the correct font size in all browsers. */small {  font-size: 80%;}/** * Prevent `sub` and `sup` elements from affecting the line height in * all browsers. */sub,sup {  font-size: 75%;  line-height: 0;  position: relative;  vertical-align: baseline;}sub {  bottom: -0.25em;}sup {  top: -0.5em;}/* Embedded content   ========================================================================== *//** * Remove the border on images inside links in IE 10. */img {  border-style: none;}/* Forms   ========================================================================== *//** * 1. Change the font styles in all browsers. * 2. Remove the margin in Firefox and Safari. */button,input,optgroup,select,textarea {  font-family: inherit; /* 1 */  font-size: 100%; /* 1 */  line-height: 1.15; /* 1 */  margin: 0; /* 2 */}/** * Show the overflow in IE. * 1. Show the overflow in Edge. */button,input { /* 1 */  overflow: visible;}/** * Remove the inheritance of text transform in Edge, Firefox, and IE. * 1. Remove the inheritance of text transform in Firefox. */button,select { /* 1 */  text-transform: none;}/** * Correct the inability to style clickable types in iOS and Safari. */button,[type="button"],[type="reset"],[type="submit"] {  -webkit-appearance: button;}/** * Remove the inner border and padding in Firefox. */button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner {  border-style: none;  padding: 0;}/** * Restore the focus styles unset by the previous rule. */button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring {  outline: 1px dotted ButtonText;}/** * Correct the padding in Firefox. */fieldset {  padding: 0.35em 0.75em 0.625em;}/** * 1. Correct the text wrapping in Edge and IE. * 2. Correct the color inheritance from `fieldset` elements in IE. * 3. Remove the padding so developers are not caught out when they zero out *    `fieldset` elements in all browsers. */legend {  box-sizing: border-box; /* 1 */  color: inherit; /* 2 */  display: table; /* 1 */  max-width: 100%; /* 1 */  padding: 0; /* 3 */  white-space: normal; /* 1 */}/** * Add the correct vertical alignment in Chrome, Firefox, and Opera. */progress {  vertical-align: baseline;}/** * Remove the default vertical scrollbar in IE 10+. */textarea {  overflow: auto;}/** * 1. Add the correct box sizing in IE 10. * 2. Remove the padding in IE 10. */[type="checkbox"],[type="radio"] {  box-sizing: border-box; /* 1 */  padding: 0; /* 2 */}/** * Correct the cursor style of increment and decrement buttons in Chrome. */[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button {  height: auto;}/** * 1. Correct the odd appearance in Chrome and Safari. * 2. Correct the outline style in Safari. */[type="search"] {  -webkit-appearance: textfield; /* 1 */  outline-offset: -2px; /* 2 */}/** * Remove the inner padding in Chrome and Safari on macOS. */[type="search"]::-webkit-search-decoration {  -webkit-appearance: none;}/** * 1. Correct the inability to style clickable types in iOS and Safari. * 2. Change font properties to `inherit` in Safari. */::-webkit-file-upload-button {  -webkit-appearance: button; /* 1 */  font: inherit; /* 2 */}/* Interactive   ========================================================================== *//* * Add the correct display in Edge, IE 10+, and Firefox. */details {  display: block;}/* * Add the correct display in all browsers. */summary {  display: list-item;}/* Misc   ========================================================================== *//** * Add the correct display in IE 10+. */template {  display: none;}/** * Add the correct display in IE 10. */[hidden] {  display: none;}'! !AccessComponent subclass: #LoginComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!LoginComponent commentStamp: 'NicolsJoaqunParisi 4/9/2021 13:18' prior: 0!application := WAAdmin register: LoginComponent asApplicationAt: 'CuOOra'.application sessionClass: SessionUser.!!LoginComponent methodsFor: 'accesing'!login	(self model existUserWithName: username password: password)		ifNotNil: [ :u | self access: u ]		ifNil: [ error := true.			self textError: 'El usuario no existe' ].	username := nil.	password := nil! !!LoginComponent methodsFor: 'accesing'!register	self call: RegisterComponent new! !!LoginComponent methodsFor: 'rendering'!renderButtonsOn: aCanvas	self renderSignInButtonOn: aCanvas.! !!LoginComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/3/2021 21:45'!renderHeadingOn: aCanvas	aCanvas div		class: 'login-header';		with: [ aCanvas heading				level: 1;				with: 'CuOOra'.			self renderSignUpButtonOn: aCanvas ].	aCanvas horizontalRule! !!LoginComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/3/2021 23:13'!renderSignInButtonOn: aCanvas	aCanvas submitButton		callback: [ self login ];		class: 'btn';		with: 'Iniciar sesion'! !!LoginComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/4/2021 10:42'!renderSignUpButtonOn: aCanvas	aCanvas		paragraph: [ aCanvas anchor				callback: [ self register ];				with: [ aCanvas button						class: 'header-button login-header-btn-register';						with: 'Registrar' ] ]! !AccessComponent subclass: #RegisterComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!RegisterComponent methodsFor: 'accessing'!registerAndLogin	| user |	user := self model registerUser: username password: password.	user		ifNotNil: [ self access: user ]		ifNil: [ error := true.			self textError: 'El usuario ya existe' ]! !!RegisterComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:51'!renderButtonsOn: aCanvas	aCanvas div		class: 'buttons-container';		with: [ self renderSignUpButtonOn: aCanvas.			self renderBackButtonOn: aCanvas ]! !!RegisterComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:51'!renderBackButtonOn: aCanvas	aCanvas submitButton		callback: [ self answer];		class:'btn';		with: 'Volver'! !!RegisterComponent methodsFor: 'rendering'!renderSignUpButtonOn: aCanvas	aCanvas submitButton		callback: [ self registerAndLogin ];		class:'btn';		with: 'Registrarse'! !WASession subclass: #SessionUser	instanceVariableNames: 'user'	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!SessionUser methodsFor: 'accessing'!user: unUsuario 	user := unUsuario ! !!SessionUser methodsFor: 'accessing'!user	^ user! !WAComponent subclass: #StructureProfileComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!StructureProfileComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/5/2021 10:11'!model	^ CuOOra soleInstance! !!StructureProfileComponent methodsFor: 'hooks'!style	^ '@import url(''https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap'');html {	font-family: ''Lato'', sans-serif;}.name-app{	font-family: ''Lato'', sans-serif;	font-weight: bold;	cursor: pointer;	text-decoration:none;	color:black}.name-app:hover{      color:#0474fc}.header-home {	display:flex;	justify-content: space-between;}.home-botones {	width: 100%;	display: flex;	align-items:center;	justify-content: flex-end;}.column-newQuestion {	display: flex;	justify-content: flex-end;   align-items: center;	width: 20%;   font-size:1.2em;}.column-username{	display: flex;	justify-content: flex-end;   align-items: center;	width: 20%;   font-size:1.2em;}.column-logout {	width: 7%;	padding-right: 20px;   display:flex;   justify-content:flex-end;   align-items:center;   font-size:1.2em;}.btn {	background-color:#0474fc;   height:40px;   font-size:16px;   color:white;	width: 50%;	font-family: ''Lato'', sans-serif;	cursor: pointer;}.btn:hover { 	background-color: #FFFFFF;   color: #0474fc;}.btn-newQuestion {	width: 100%;}.header-button { 	background-color: white;	color: #0474fc;	height:40px;	font-size:16px;	border-style: none;	font-family: ''Lato'', sans-serif;	cursor: pointer;}.header-button:hover { 	color: #757575;}.header-button:focus {	outline: none;}.question-padding {	padding: 0 20px;	}.question-title {	background-color: white;	border-style: none;	font-family: ''Lato'', sans-serif;	font-size: 22px;	cursor: pointer;}.question-title:focus {	outline: none;}.fs-italic {	font-style: italic;}.question-topics {	color: #757575;}.topicos-cargados {	width: 50%;	align-items: center;}.topicos-cargados fieldset {	width: 50%;}.topicos-cargados label { 	width: 20%;}.topicos-cargados fieldset input {	width: 15%;	margin-top: 1%;}.rowDescription { 	display: flex;	align-items: top;	justify-content: space-between;}textarea {	width: 75%;	height: 150px;   resize: none;}.form-fieldset { 	padding-top: 2%;}.fieldset { 	margin: 5% 0;}.form-defect {	width:50%;	margin:auto;	font-size:1.3em}.form-defect div {	margin-bottom:4%}.form-defect label{   margin-left:1%}.form-defect input {	width:75%;   float:right;    height:30px}.form-defect .btn { 	width: 50%;	height: 50px; }.buttons-container { 	display: flex;	justify-content: space-between;}.buttons-container .btn {	width: 40%;}.answer-hr {	color: #DFE9F3;}.answer-bold {	font-size: 18px;}.no-hay-mas-respuestas {	text-align: center;}.answer-button-container {	display: flex;	justify-content: center;}.answer-button {	background-color:#0474fc;   height:40px;   font-size:16px;   color:white;	width: 100%;	font-family: ''Lato'', sans-serif;}.answer-button:hover { 	background-color: #FFFFFF;   color: #0474fc;}.answer-container {	display: flex;	justify-content: space-between;}.username-button {	background-color: white;	border-style: none;	font-family: ''Lato'', sans-serif;	font-weight: bold;	cursor: pointer;}.username-button:focus{	outline: none;}.back-button-container {	display: flex;	justify-content: flex-end;	align-items: center;	padding: 20px;}.answer-back-button {	background-color: white;	color: #0474fc;	font-size:18px;	font-family: ''Lato'', sans-serif;	border-style: none;}.answer-back-button:hover {	color: black;}.fieldset .buttons-container {	margin: 10px 0;}.question-buttons {	display: flex;	justify}input[type="image"] {	height: 20px;}.thumb-up-container {	background-image: url(''https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Thumb_up_icon_2.svg/1200px-Thumb_up_icon_2.svg.png'');	background-size: cover;	background-color: transparent;	height: 20px;	width: 20px;	border-style: none;	margin: 0 5px;	cursor: pointer;	filter: invert(0.4);}.thumb-up-container:hover {	filter: invert(0.4) sepia(1) hue-rotate(194deg) saturate(1000%);}.thumb-up-container:focus {	outline: none;}.thumb-up-on {	.thumb-up-container;	filter: invert(0.4) sepia(1) hue-rotate(194deg) saturate(1000%);}.thumb-up-on:hover {	filter: invert(0.4);}.thumb-down-container {	background-image: url(''https://image.flaticon.com/icons/png/512/25/25395.png'');	background-size: cover;	background-color: transparent;	height: 20px;	width: 20px;	border-style: none;	margin: 0 5px;	margin-top: 2px;	cursor: pointer;	filter: invert(0.4);}.thumb-down-container:hover {	filter: invert(0.4) sepia(1) hue-rotate(320deg) saturate(1000%);}.thumb-down-container:focus {	outline: none;}.thumb-down-on {	.thumb-down-container;	filter: invert(0.4) sepia(1) hue-rotate(320deg) saturate(1000%);}.thumb-down-on:hover {	filter: invert(0.4);}.answer-username-button {	background-color: white;	border-style: none;	font-family: ''Lato'', sans-serif;	font-style: italic;	font-size: 18px;	cursor: pointer;}.answer-username-button:focus{	outline: none;}/*!! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css *//* Document   ========================================================================== *//** * 1. Correct the line height in all browsers. * 2. Prevent adjustments of font size after orientation changes in iOS. */html {  line-height: 1.15; /* 1 */  -webkit-text-size-adjust: 100%; /* 2 */}/* Sections   ========================================================================== *//** * Remove the margin in all browsers. */body {  margin: 0;}/** * Render the `main` element consistently in IE. */main {  display: block;}/** * Correct the font size and margin on `h1` elements within `section` and * `article` contexts in Chrome, Firefox, and Safari. */h1 {  font-size: 2em;  margin: 0.67em 0;}/* Grouping content   ========================================================================== *//** * 1. Add the correct box sizing in Firefox. * 2. Show the overflow in Edge and IE. */hr {  box-sizing: content-box; /* 1 */  height: 0; /* 1 */  overflow: visible; /* 2 */}/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */pre {  font-family: monospace, monospace; /* 1 */  font-size: 1em; /* 2 */}/* Text-level semantics   ========================================================================== *//** * Remove the gray background on active links in IE 10. */a {  background-color: transparent;}/** * 1. Remove the bottom border in Chrome 57- * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. */abbr[title] {  border-bottom: none; /* 1 */  text-decoration: underline; /* 2 */  text-decoration: underline dotted; /* 2 */}/** * Add the correct font weight in Chrome, Edge, and Safari. */b,strong {  font-weight: bolder;}/** * 1. Correct the inheritance and scaling of font size in all browsers. * 2. Correct the odd `em` font sizing in all browsers. */code,kbd,samp {  font-family: monospace, monospace; /* 1 */  font-size: 1em; /* 2 */}/** * Add the correct font size in all browsers. */small {  font-size: 80%;}/** * Prevent `sub` and `sup` elements from affecting the line height in * all browsers. */sub,sup {  font-size: 75%;  line-height: 0;  position: relative;  vertical-align: baseline;}sub {  bottom: -0.25em;}sup {  top: -0.5em;}/* Embedded content   ========================================================================== *//** * Remove the border on images inside links in IE 10. */img {  border-style: none;}/* Forms   ========================================================================== *//** * 1. Change the font styles in all browsers. * 2. Remove the margin in Firefox and Safari. */button,input,optgroup,select,textarea {  font-family: inherit; /* 1 */  font-size: 100%; /* 1 */  line-height: 1.15; /* 1 */  margin: 0; /* 2 */}/** * Show the overflow in IE. * 1. Show the overflow in Edge. */button,input { /* 1 */  overflow: visible;}/** * Remove the inheritance of text transform in Edge, Firefox, and IE. * 1. Remove the inheritance of text transform in Firefox. */button,select { /* 1 */  text-transform: none;}/** * Correct the inability to style clickable types in iOS and Safari. */button,[type="button"],[type="reset"],[type="submit"] {  -webkit-appearance: button;}/** * Remove the inner border and padding in Firefox. */button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner {  border-style: none;  padding: 0;}/** * Restore the focus styles unset by the previous rule. */button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring {  outline: 1px dotted ButtonText;}/** * Correct the padding in Firefox. */fieldset {  padding: 0.35em 0.75em 0.625em;}/** * 1. Correct the text wrapping in Edge and IE. * 2. Correct the color inheritance from `fieldset` elements in IE. * 3. Remove the padding so developers are not caught out when they zero out *    `fieldset` elements in all browsers. */legend {  box-sizing: border-box; /* 1 */  color: inherit; /* 2 */  display: table; /* 1 */  max-width: 100%; /* 1 */  padding: 0; /* 3 */  white-space: normal; /* 1 */}/** * Add the correct vertical alignment in Chrome, Firefox, and Opera. */progress {  vertical-align: baseline;}/** * Remove the default vertical scrollbar in IE 10+. */textarea {  overflow: auto;}/** * 1. Add the correct box sizing in IE 10. * 2. Remove the padding in IE 10. */[type="checkbox"],[type="radio"] {  box-sizing: border-box; /* 1 */  padding: 0; /* 2 */}/** * Correct the cursor style of increment and decrement buttons in Chrome. */[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button {  height: auto;}/** * 1. Correct the odd appearance in Chrome and Safari. * 2. Correct the outline style in Safari. */[type="search"] {  -webkit-appearance: textfield; /* 1 */  outline-offset: -2px; /* 2 */}/** * Remove the inner padding in Chrome and Safari on macOS. */[type="search"]::-webkit-search-decoration {  -webkit-appearance: none;}/** * 1. Correct the inability to style clickable types in iOS and Safari. * 2. Change font properties to `inherit` in Safari. */::-webkit-file-upload-button {  -webkit-appearance: button; /* 1 */  font: inherit; /* 2 */}/* Interactive   ========================================================================== *//* * Add the correct display in Edge, IE 10+, and Firefox. */details {  display: block;}/* * Add the correct display in all browsers. */summary {  display: list-item;}/* Misc   ========================================================================== *//** * Add the correct display in IE 10+. */template {  display: none;}/** * Add the correct display in IE 10. */[hidden] {  display: none;}'! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:52'!registerDislike: aPost	self model		registerUserReaction: self session user		post: aPost		reaction: false! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:11'!renderBodyOn: aCanvas	self subclassResponsibility ! !!StructureProfileComponent methodsFor: 'rendering'!renderBackButtonOn: aCanvas	aCanvas submitButton		callback: [ self answer ];		class: 'btn';		with: 'Volver'! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:51'!renderButtonLike: aCanvas publicacion: unaPublicacion	aCanvas anchor		callback: [ self registerLike: unaPublicacion ];		with: [ (unaPublicacion hasLikeOf: self session user username)				ifTrue: [ aCanvas button						class: 'thumb-up-container thumb-up-on';						with: '' ]				ifFalse: [ aCanvas button						class: 'thumb-up-container';						with: '' ] ]! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:22'!renderContentOn: aCanvas	self renderHeaderProfileOn: aCanvas.	aCanvas horizontalRule.	self renderBodyOn: aCanvas! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:52'!registerLike: aPost	self model		registerUserReaction: self session user		post: aPost		reaction: true! !!StructureProfileComponent methodsFor: 'rendering'!renderAplicationNameOn: aCanvas	aCanvas anchor		class: 'name-app';		callback: [ self call: HomeComponent new ];		with: [ aCanvas heading				level: 1;				with: 'CuOOra' ]! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 01:13'!renderHeaderProfileOn: aCanvas	aCanvas div		class: 'header-home';		with: [ self renderAplicationNameOn: aCanvas.			aCanvas div				class: 'home-botones';				with: [ aCanvas div						class: 'column-username';						with: [ aCanvas strong: self session user username.							 ] ].					aCanvas div						class: 'column-logout';						with: [ 							self renderLogoutButtonOn: aCanvas ] ]! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:51'!renderButtonDislike: aCanvas publicacion: unaPublicacion	aCanvas anchor		callback: [ self registerDislike: unaPublicacion ];		with: [ (unaPublicacion hasDislikeOf: self session user username)				ifTrue: [ aCanvas button						class: 'thumb-down-container thumb-down-on';						with: '' ]				ifFalse: [ aCanvas button						class: 'thumb-down-container';						with: '' ] ]! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/9/2021 14:05'!renderLogoutButtonOn: aCanvas	aCanvas		paragraph: [ aCanvas anchor				callback: [ self call: LoginComponent new ];				with: [ aCanvas button						class: 'header-button';						with: 'Log out' ] ]! !!StructureProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 01:13'!renderUsername: aUsername on: aCanvas	aCanvas anchor		callback: [ self call: (UserProfileComponent newWith: aUsername) ];		with: [ aCanvas button				class: 'username-button';				with: aUsername username ]! !StructureProfileComponent subclass: #HomeComponent	instanceVariableNames: 'relatedQuestions'	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:54'!renderBodyOn: aCanvas	self renderQuestionTitleOn: aCanvas.	self renderLastRelevantQuestionsOn: aCanvas! !!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:20'!renderQuestionTitleOn: aCanvas	aCanvas heading		level2;		with: [ aCanvas strong: 'Ultimas preguntas' ].! !!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:54'!renderLastRelevantQuestionsOn: aCanvas	aCanvas		paragraph: [ self session user getLastRelevantQuestions				do: [ :p | aCanvas paragraph: [ self renderQuestion: p on: aCanvas ] ] ]! !!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:01'!renderTitleQuestionOn: aCanvas question: aQuestion	aCanvas anchor		callback: [ self call: (QuestionComponent newWith: aQuestion) ];		with: [ aCanvas button				class: 'question-title fs-italic';				with: aQuestion title ]! !!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:22'!renderContentOn: aCanvas	self renderHeaderProfileOn: aCanvas.	aCanvas horizontalRule.	self renderBodyOn: aCanvas! !!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/7/2021 16:29'!renderNewQuestionButtonOn: aCanvas	aCanvas		paragraph: [ aCanvas anchor				callback: [ self call: NewQuestionComponent new ];				with: [ aCanvas button						class: 'header-button';						with: 'Crear pregunta' ] ]! !!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:53'!renderQuestion: p on: aCanvas	aCanvas div		class: 'question-padding';		with: [ aCanvas div				class: 'question-title fs-italic';				with: [ self renderTitleQuestionOn: aCanvas question: p ].			aCanvas div				class: 'fs-italic question-topics';				with:						[ aCanvas paragraph: 'Topicos: ' , p getFormatedTopicsNames ].			aCanvas				label: [ aCanvas label: 'Realizada por: '.					self renderUsername: p creatorUser on: aCanvas.					aCanvas						label: ' | ' , p getAnswersQuantity asString , ' respuestas' ].			aCanvas				paragraph:					p getNumberOfLikes asString , ' likes ' , ' | '						, p getNumberOfDislikes asString , ' dislikes'.			aCanvas div				class: 'question-buttons';				with: [ self renderButtonLike: aCanvas publicacion: p.					aCanvas label: ' | '.					self renderButtonDislike: aCanvas publicacion: p ].			aCanvas horizontalRule ]! !!HomeComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/7/2021 16:42'!renderLogoutButtonOn: aCanvas	aCanvas		paragraph: [ aCanvas anchor				callback: [ self call: LoginComponent new ];				with: [ aCanvas button						class: 'header-button logout-button';						with: 'Log out' ] ]! !!HomeComponent methodsFor: 'rendering'!renderHeaderProfileOn: aCanvas	aCanvas div		class: 'header-home';		with: [ self renderAplicationNameOn: aCanvas.			aCanvas div				class: 'home-botones';				with: [ aCanvas div						class: 'column-newQuestion';						with: [ self renderNewQuestionButtonOn: aCanvas ].					aCanvas div						class: 'column-username';						with: [ self renderUsername: self session user on: aCanvas] ].					aCanvas div						class: 'column-logout';						with: [							self renderLogoutButtonOn: aCanvas ] ]! !StructureProfileComponent subclass: #NewAnswerComponent	instanceVariableNames: 'question text'	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!NewAnswerComponent methodsFor: 'initialization' stamp: 'NicolsJoaqunParisi 4/11/2021 14:01'!initializeWith: aQuestion	self initialize.	question := aQuestion! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:46'!renderHeadingFormOn: aCanvas	aCanvas div		class: 'titulo-form';		with: [ aCanvas heading				level: 2;				with: 'Nueva Respuesta' ]! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/7/2021 15:18'!renderButtonsOn: aCanvas	aCanvas div		class: 'buttons-container';		with: [ self renderNewAnswerButtonOn: aCanvas.			self renderBackButtonOn: aCanvas ]! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:55'!renderBodyOn: aCanvas	self renderHeadingFormOn: aCanvas.	self renderQuestionOn: aCanvas.	self renderNewAnswerFormOn: aCanvas! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:15'!renderNewAnswerFormOn: aCanvas	aCanvas div		class: 'form-defect';		with: [ aCanvas				form: [ aCanvas div						class: 'fieldset';						with: [ aCanvas fieldSet: [ self renderInputElementsOn: aCanvas ].							self renderButtonsOn: aCanvas ] ] ]! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:56'!renderNewQuestionTitleOn: aCanvas	aCanvas div				class: 'question-title fs-italic';				with: [ aCanvas label: question title ]! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:55'!createAnswer	self model		createAnswer: self text		relatedQuestion: question		user: self session user! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:56'!renderQuestionOn: aCanvas	aCanvas div		class: 'question-padding';		with: [ self renderNewQuestionTitleOn: aCanvas ].			aCanvas div				class: 'fs-italic question-topics';				with: [ aCanvas						paragraph: 'Topicos: ' , question getFormatedTopicsNames ].			aCanvas				label: [ aCanvas label: 'Realizada por: '.					self renderUsername: question creatorUser on: aCanvas ].			aCanvas				paragraph:					question getNumberOfLikes asString , ' likes ' , ' | '						, question getNumberOfDislikes asString , ' dislikes'.			aCanvas div				class: 'question-buttons';				with: [ self renderButtonLike: aCanvas publicacion: question.					aCanvas label: '  |  '.					self renderButtonDislike: aCanvas publicacion: question ].			aCanvas horizontalRule! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:55'!renderNewAnswerButtonOn: aCanvas	aCanvas submitButton		callback: [ self createAnswer.			self answer ];		class: 'btn';		with: 'Guardar'! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/9/2021 14:29'!renderHeaderProfileOn: aCanvas	aCanvas div		class: 'header-home';		with: [ self renderAplicationNameOn: aCanvas.			aCanvas div				class: 'home-botones';				with: [ 					aCanvas div						class: 'column-username';						with: [ self renderUsername: self session user on: aCanvas ] ].			aCanvas div				class: 'column-logout';				with: [ self renderLogoutButtonOn: aCanvas ] ]! !!NewAnswerComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 11:52'!renderInputElementsOn: aCanvas	aCanvas div		class: 'form-fieldset form-group row answer-container';		with: [ aCanvas label: 'Respuesta:'.			aCanvas textArea on: #text of: self ]! !!NewAnswerComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 13:54'!text: unTexto	text := unTexto! !!NewAnswerComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 13:54'!text	^text! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewAnswerComponent class	instanceVariableNames: ''!!NewAnswerComponent class methodsFor: 'instance creation' stamp: 'NicolsJoaqunParisi 4/7/2021 15:03'!newWith: unaPregunta	^self new initializeWith: unaPregunta! !StructureProfileComponent subclass: #NewQuestionComponent	instanceVariableNames: 'title description selectedTopics'	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!NewQuestionComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 14:02'!checkboxValueOf: aTopicName	^ selectedTopics includes: aTopicName! !!NewQuestionComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 13:59'!createQuestion	self model		createQuestion: self title		description: self description		colTopics: (CuOOra soleInstance getTopicsWithNames: selectedTopics)		user: self session user! !!NewQuestionComponent methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 14:02'!checkboxChangeValueOf: aTopicName to: value	value		ifFalse: [ (self checkboxValueOf: aTopicName)				ifTrue: [ selectedTopics remove: aTopicName ] ]		ifTrue: [ selectedTopics add: aTopicName ]! !!NewQuestionComponent methodsFor: 'rendering'!renderHeadingFormOn: aCanvasaCanvas div		class: 'titulo-form';		with: [ aCanvas heading				level: 2;				with: 'Nueva Pregunta']		! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/4/2021 01:43'!renderButtonsOn: aCanvas	aCanvas div		class: 'buttons-container';		with: [ self renderNewQuestionButtonOn: aCanvas.			self renderBackButtonOn: aCanvas ]! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:16'!renderNewQuestionFormOn: aCanvas	aCanvas div		class: 'form-defect';		with: [ aCanvas				form: [ aCanvas div						class: 'fieldset';						with: [ aCanvas fieldSet: [ self renderInputElementsOn: aCanvas ] ].					self renderButtonsOn: aCanvas ] ]! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:22'!renderBodyOn: aCanvas	self renderHeadingFormOn: aCanvas.	self renderNewQuestionFormOn: aCanvas! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:02'!description: aDescription	description := aDescription! !!NewQuestionComponent methodsFor: 'rendering'!renderBackButtonOn: aCanvas	aCanvas submitButton		callback: [ self answer ];		class: 'btn';		with: 'Volver'! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:58'!description	^ description! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:59'!initialize	super initialize.	selectedTopics := OrderedCollection new! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:56'!title	^ title	! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:02'!title: aTitle	title := aTitle! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/9/2021 14:30'!renderHeaderProfileOn: aCanvas	aCanvas div		class: 'header-home';		with: [ self renderAplicationNameOn: aCanvas.			aCanvas div				class: 'home-botones';				with: [ 					aCanvas div						class: 'column-username';						with: [ self renderUsername: self session user on: aCanvas ] ].			aCanvas div				class: 'column-logout';				with: [ self renderLogoutButtonOn: aCanvas ] ]! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:58'!renderNewQuestionButtonOn: aCanvas	aCanvas submitButton		callback: [ self createQuestion.			         self answer ];		class: 'btn';		with: 'Crear pregunta'! !!NewQuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:37'!renderInputElementsOn: aCanvas	aCanvas div		class: 'form-fieldset form-group row';		with: [ aCanvas label: 'Titulo'.			aCanvas textInput on: #title of: self ].	aCanvas div		class: 'form-group rowDescription';		with: [ aCanvas label: 'Descripcion'.			aCanvas textArea on: #description of: self ].	aCanvas label: 'Seleccione topicos relacionados:'.	aCanvas paragraph: ''.	"Para separar"	aCanvas div		class: 'topicos-cargados';		with: [ aCanvas				fieldSet: [ CuOOra soleInstance getTopics						do: [ :topico | 							aCanvas								paragraph: [ aCanvas label: topico name.									aCanvas checkbox										value: (self checkboxValueOf: topico name);										callback: [ :value | self checkboxChangeValueOf: topico name to: value ] ] ] ] ]! !StructureProfileComponent subclass: #QuestionComponent	instanceVariableNames: 'question'	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/9/2021 14:31'!renderHeaderProfileOn: aCanvas	aCanvas div		class: 'header-home';		with: [ self renderAplicationNameOn: aCanvas.			aCanvas div				class: 'home-botones';				with: [ aCanvas div						class: 'column-username';						with: [ super renderUsername: self session user on: aCanvas ] ].			aCanvas div				class: 'column-logout';				with: [ self renderLogoutButtonOn: aCanvas ] ]! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:00'!renderAnswerButtonOn: aCanvas	aCanvas div		class: 'answer-button-container';		with: [ aCanvas				paragraph: [ aCanvas anchor						callback: [ self call: (NewAnswerComponent newWith: question) ];						with: [ aCanvas button								class: 'answer-button';								with: 'Agregar respuesta' ] ] ]! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:03'!renderAnswer: anAnswer on: aCanvas	aCanvas div		class: 'question-padding';		with: [ aCanvas div				class: 'answer-bold fs-italic';				with: [ aCanvas paragraph						with: [ aCanvas label: 'Respuesta de'.							self renderUsername: anAnswer creatorUser on: aCanvas ] ].			aCanvas paragraph: anAnswer text.			aCanvas				paragraph:					anAnswer getNumberOfLikes asString , ' likes ' , ' | '						, anAnswer getNumberOfDislikes asString , ' dislikes'.			aCanvas div				class: 'question-buttons';				with: [ self renderButtonLike: aCanvas publicacion: anAnswer.					aCanvas label: ' | '.					self renderButtonDislike: aCanvas publicacion: anAnswer ] ].	aCanvas div		class: 'question-padding answers-hr';		with: [ aCanvas horizontalRule ]! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:03'!renderAnswersOn: aCanvas	question getAnswers		do: [ :answer | self renderAnswer: answer on: aCanvas ].	aCanvas div		class: 'no-hay-mas-respuestas';		with: [ aCanvas paragraph: 'No hay m√°s respuestas' ]! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:17'!renderBackButtonOn: aCanvasaCanvas div		class: 'back-button-container';		with: [ 	aCanvas anchor		callback: [ self answer ];		with: [ aCanvas button				class: 'answer-back-button';				with: 'Volver' ]]! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:00'!renderBodyOn: aCanvas	self renderQuestionOn: aCanvas.	self renderAnswersOn: aCanvas.	self renderAnswerButtonOn: aCanvas.	self renderBackButtonOn: aCanvas! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:02'!initializeWith: aQuestion	self initialize.	question := aQuestion! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:00'!renderQuestionOn: aCanvas	aCanvas div		class: 'question-padding';		with: [ aCanvas div				class: 'question-title fs-italic';				with: [ aCanvas label: question title ].			aCanvas div				class: 'fs-italic question-topics';				with: [ aCanvas						paragraph: 'Topicos: ' , question getFormatedTopicsNames ].			aCanvas				label: [ aCanvas label: 'Realizada por:'.					super renderUsername: question creatorUser on: aCanvas ].			aCanvas				paragraph:					question getNumberOfLikes asString , ' likes ' , ' | '						, question getNumberOfDislikes asString , ' dislikes'.			aCanvas div				class: 'question-buttons';				with: [ self renderButtonLike: aCanvas publicacion: question.					aCanvas label: '  |  '.					self renderButtonDislike: aCanvas publicacion: question ].			aCanvas horizontalRule ]! !!QuestionComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 01:13'!renderUsername: aUsername on: aCanvas	aCanvas anchor		callback: [ self call: (UserProfileComponent newWith: aUsername) ];		with: [ aCanvas button				class: 'answer-username-button';				with: aUsername username ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QuestionComponent class	instanceVariableNames: ''!!QuestionComponent class methodsFor: 'instance creation' stamp: 'NicolsJoaqunParisi 4/7/2021 13:41'!newWith: unaPregunta	^ self new initializeWith: unaPregunta! !StructureProfileComponent subclass: #UserProfileComponent	instanceVariableNames: 'user'	classVariableNames: ''	package: 'Objetos2-CuOOra-ui'!!UserProfileComponent methodsFor: 'initialization' stamp: 'NicolsJoaqunParisi 4/7/2021 17:57'!initializeWith: anUser	self initialize.	user := anUser! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:04'!renderBodyOn: aCanvas	self renderUsernameOn: aCanvas.	self renderUserQuestionsOn: aCanvas.	self renderBackButtonOn: aCanvas! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 01:13'!renderUsernameOn: aCanvas	aCanvas heading		level2;		with: [ aCanvas strong: 'Preguntas de ' , user username.			(self session user == user) ifFalse: [self renderFollowButtonOn: aCanvas] ]! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/8/2021 10:19'!renderBackButtonOn: aCanvasaCanvas div		class: 'back-button-container';		with: [	aCanvas anchor		callback: [ self answer ];		with: [ aCanvas button				class: 'answer-back-button';				with: 'Volver' ] ]! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:39'!followUser	self model registerUser: self session user asFollowerOf: user! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:35'!renderTitleQuestionOn: aCanvas question: aQuestion	aCanvas anchor		callback: [ self call: (QuestionComponent newWith: aQuestion) ];		with: [ aCanvas button				class: 'question-title fs-italic';				with: aQuestion title ]! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 12:16'!renderFollowButtonOn: aCanvas	(self session user followsAt: user)		ifFalse: [ aCanvas anchor				callback: [ self followUser ];				with: [ aCanvas button						class: 'header-button';						with: 'follow' ] ]		ifTrue: [ aCanvas anchor				callback: [ self unfollowUser ];				with: [ aCanvas button						class: 'header-button';						with: 'unfollow' ] ]! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:41'!unfollowUser	self model registerUser: self session user whoStopFollowTo: user! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 13:53'!renderQuestion: p on: aCanvas	aCanvas div		class: 'question-padding';		with: [ aCanvas div				class: 'question-title fs-italic';				with: [ self renderTitleQuestionOn: aCanvas question: p ].			aCanvas div				class: 'fs-italic question-topics';				with:						[ aCanvas paragraph: 'Topicos: ' , p getFormatedTopicsNames ].			aCanvas				paragraph: [ aCanvas label: 'Realizada por: '.					aCanvas strong: user username.					aCanvas						label: ' | ' , p getAnswersQuantity asString , ' respuestas' ].			aCanvas				paragraph:					p getNumberOfLikes asString , ' likes ' , ' | '						, p getNumberOfDislikes asString , ' dislikes'.			aCanvas div				class: 'question-buttons';				with: [ self renderButtonLike: aCanvas publicacion: p.					aCanvas label: '  |  '.					self renderButtonDislike: aCanvas publicacion: p ].			aCanvas horizontalRule ]! !!UserProfileComponent methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 14:04'!renderUserQuestionsOn: aCanvas	aCanvas		paragraph: [ user getQuestions				do: [ :p | aCanvas paragraph: [ self renderQuestion: p on: aCanvas ] ] ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UserProfileComponent class	instanceVariableNames: ''!!UserProfileComponent class methodsFor: 'instance creation' stamp: 'NicolsJoaqunParisi 4/7/2021 17:56'!newWith: anUser	^ self new initializeWith: anUser! !TestCase subclass: #TestAnswer	instanceVariableNames: 'answer like dislike user'	classVariableNames: ''	package: 'Objetos2-CuOOra-tests'!!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:10'!testAddLikeToAnAnswerWithoutReactions	"Test para agregar un like a una respuesta sin reacciones del mismo usuario"	self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 0.		answer addLike: like.		self assert: (answer getNumberOfLikes) equals: 1.	self assert: (answer getNumberOfDislikes) equals: 0.! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:11'!testAnswerScoreEqualsToOne	"Test para obtener el puntaje de una respuesta. Este caso es donde la respuesta tiene un like"	answer addLike: like.	self assert: (answer calculateScore) equals: 1	! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:11'!testAnswerScoreEqualsToMinusOne	"Test para obtener el puntaje de una respuesta. Este caso es donde la respuesta tiene un dislike"	answer addDislike: dislike.		self assert: (answer calculateScore) equals: -1	! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:10'!testAddLikeToAnAnswerWithLike	"Test para agregar un like a una respuesta con un like del mismo usuario"	answer addLike: like.		self assert: (answer getNumberOfLikes) equals: 1.	self assert: (answer getNumberOfDislikes) equals: 0.		answer addLike: like.		self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 0.! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:09'!testAddDislikeToAnAnswerWithoutReactions	"Test para agregar un dislike a una respuesta sin reacciones del mismo usuario"	self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 0.		answer addDislike: dislike.		self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 1.! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 20:26'!setUp	user := User newWith: 'Pedro' password: ''.		like := Reaction newWith: user type: true.		dislike := Reaction newWith: user type: false.		answer := Answer newWith: '' user: user.		! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:09'!testAddLikeToAnAnswerWithDislike	"Test para agregar un like a una respuesta con un dislike del mismo usuario"	answer addDislike: dislike.		self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 1.		answer addLike: like.		self assert: (answer getNumberOfLikes) equals: 1.	self assert: (answer getNumberOfDislikes) equals: 0.! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:08'!testAddDislikeToAnAnswerWithLike	"Test para agregar un dislike a una respuesta con un like del mismo usuario"	answer addLike: like.		self assert: (answer getNumberOfLikes) equals: 1.	self assert: (answer getNumberOfDislikes) equals: 0.		answer addDislike: dislike.		self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 1.! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:08'!testAddDislikeToAnAnswerWithDislike	"Test para agregar un dislike a una respuesta con un dislike del mismo usuario"	answer addDislike: dislike.		self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 1.		answer addDislike: dislike.		self assert: (answer getNumberOfLikes) equals: 0.	self assert: (answer getNumberOfDislikes) equals: 0.! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:11'!testAnswerScoreEqualsToZero	"Test para obtener el puntaje de una respuesta. Este caso es donde la respuesta no tiene reacciones"	self assert: (answer calculateScore) equals: 0	! !!TestAnswer methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:16'!testAnswerScoreEqualsToZeroWithTwoReactionsFromDifferentsUsers	"Test para obtener el puntaje de una respuesta. Este caso es donde la respuesta tiene un like y un dislike"	answer addLike: like.		dislike := Reaction newWith: User new type: false. 	answer addDislike: dislike.		self assert: (answer calculateScore) equals: 0	! !TestCase subclass: #TestCuOOra	instanceVariableNames: 'cuoora questionWithAnswer question answer topic relatedQuestion user anotherUser answerWithBestScore answerWithWorstScore'	classVariableNames: ''	package: 'Objetos2-CuOOra-tests'!!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:45'!testGetZeroQuestionsFromAnUser	"Test donde se verifica que un usuario no realizo preguntas"		self assert: ((cuoora userAt: 1) getQuestions size) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:45'!testGetZeroAnswersFromAQuestionWithoutAnswers	"Test donde se verifica que no hay respuestas para una pregunta"		question := cuoora createQuestion: '' description: '' colTopics: (OrderedCollection new: 1 withAll: topic)  user: user.	self assert: (question getAnswersQuantity) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:26'!testCreateQuestionWithTopic	"Test donde se verifica que se puede crear una pregunta con al menos un topico"		question := cuoora createQuestion: '¬øQu√© es POO?' description: '' colTopics: (OrderedCollection new: 1 withAll: Topic new) user: (User new).		self deny: question equals: nil.	self assert: question title equals: '¬øQu√© es POO?'! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:39'!testGetUserRelevantQuestionsFromATopic	"Test donde se obtienen las preguntas relevantes de un usuario solo de topicos de interes"		user := (cuoora userAt: 1).	user addInterestingTopic: topic.	topic := (cuoora topicAt: 1).	topic addRelatedQuestion: (Question new).		self assert: (cuoora getRelevantsQuestionsForUser: user) size equals: 2.! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:46'!testRegisterUserDislikeToAPostWithADislike	"Test donde se registra un dislike de un usuario a un post con un dislike del mismo usuario"		question := Question new.	cuoora registerUserReaction: user post: question reaction: false.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 1.		cuoora registerUserReaction: user post: question reaction: false.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 22:14'!testGetUsers	self assert: (cuoora getUsers size) equals: 1.	self assert: ((cuoora getUsers) at: 1) username equals: 'pedro@cuoora.com'! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 22:21'!setUp	cuoora := CuOOra new.		user := cuoora registerUser: 'pedro@cuoora.com' password: ''.		questionWithAnswer := Question newWith: '' description: '' colRelatedTopics: (OrderedCollection new: 1 withAll: (Topic new)) user: (cuoora userAt: 1).	answer := Answer newWith: '' user: (cuoora userAt: 1). 	questionWithAnswer addAnswer: answer.		topic := cuoora createTopic: 'Smalltalk' description: ''.	relatedQuestion := Question newWith: '¬øQu√© es Smalltalk?' description: '' colRelatedTopics: (OrderedCollection new: 1 withAll: (topic))  user: (User new).	topic addRelatedQuestion: relatedQuestion.		anotherUser := User newWith: '' password: ''.	anotherUser addQuestion: Question new.! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:41'!testGetUserScoreEqualsToNighteen	"Test donde se verifica que el puntaje de un usuario el cual tiene una pregunta, la cual tiene un dislike es igual a 19"		question := Question new.	question addDislike: Reaction new.	user addQuestion: question.		self assert: (cuoora calculateUserScore: user) equals: 19! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:57'!testDeleteAQuestionWithoutAnswers	"Test donde se elimina una pregunta de un usuario, la cual no tiene respuestas"		topic := Topic new.	question := cuoora createQuestion: '' description: '' colTopics: (OrderedCollection new:1 withAll: topic) user: user.		self assert: (user getQuantityQuestions) equals: 1.	self assert: (topic getQuantityRelatedQuestions) equals: 1.		cuoora deleteQuestion: question.		self assert: (user getQuantityQuestions) equals: 0.	self assert: (topic getQuantityRelatedQuestions) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 21:13'!testGetTopics	self assert: (cuoora getTopics size) equals: 1.	self assert: ((cuoora topicAt: 1) name) equals: 'Smalltalk'! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 21:13'!testCreateTopic	self assert: ((cuoora topicAt: (cuoora getTopics size)) name) equals: 'Smalltalk'.	self assert: (cuoora getTopics size) equals: 1! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:37'!testGetAQuestionFromAUser	"Test donde se obtienen las preguntas de un usuario. En este caso tiene una pregunta"	self assert: ((cuoora userAt: 1) getQuantityQuestions) equals: 0.		(cuoora userAt: 1) addQuestion: Question new.		self assert: ((cuoora userAt: 1) getQuantityQuestions) equals: 1.! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:47'!testRegisterUserLikeToAPostWithADislike	"Test donde se registra un like de un usuario a un post con un dislike del mismo usuario"		question := Question new.	cuoora registerUserReaction: user post: question reaction: false.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 1.		cuoora registerUserReaction: user post: question reaction: true.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:41'!testGetUserScoreEqualsToSeventy	"Test donde se verifica que el puntaje de un usuario, el cual tiene una pregunta y respondio al post de otro usuario, es igual a 70"		user addQuestion: Question new.	user addAnswer: (Answer newWith: questionWithAnswer user: user).		self assert: (cuoora calculateUserScore: user) equals: 70! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:42'!testGetUserScoreEqualsToTwenty	"Test donde se verifica que el puntaje de un usuario con una pregunta sin reacciones es de 20"		user addQuestion: Question new.	self assert: (cuoora calculateUserScore: user) equals: 20! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:37'!testGetAnAnswerFromAnUser	"Test donde se obtienen las respuestas de un usuario. En este caso tiene una respuesta"		self assert: ((cuoora userAt: 1) getQuantityAnswers) equals: 0.		(cuoora userAt: 1) addAnswer: (Answer new).		self assert: ((cuoora userAt: 1) getQuantityAnswers) equals: 1.! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 22:39'!testRegisterUserAsFollowerOfAnotherUser	self assert: (user getUsersIFollow size) equals: 0.		cuoora registerUser: user asFollowerOf: anotherUser.		self assert: (user getUsersIFollow size) equals: 1! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:38'!testGetAnswersFromAQuestion	"Test donde se obtienen las respuestas a una pregunta ordenadas por puntaje"		question := cuoora createQuestion: '' description: '' colTopics: (OrderedCollection new: 1 withAll: topic)  user: user.		answerWithBestScore := Answer new.	answerWithBestScore addLike: Reaction new.		answerWithWorstScore := Answer new.	answerWithWorstScore addDislike: Reaction new.		question addAnswer: answerWithWorstScore.	question addAnswer: answerWithBestScore.		self assert: ((cuoora getAnswersToQuestion: question) at: 1) equals: answerWithBestScore.	self assert: ((cuoora getAnswersToQuestion: question) at: 2) equals: answerWithWorstScore.! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:45'!testGetZeroUserRelevantQuestions	"Test donde se verifica que un usuario no tiene preguntas relevantes"		self assert: (cuoora getRelevantsQuestionsForUser: (cuoora userAt: 1)) size equals: 0 ! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:45'!testGetZeroAnswersFromAnUser	"Test donde se verifica que un usuario no realizo respuestas"		self assert: (cuoora getUserAnswers: user) size equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:27'!testCreateUserFailed	"Test donde se comprueba que no se puede crear un usuario con el mismo email que otro existente"		self assert: (cuoora registerUser: 'pedro@cuoora.com' password: '') equals: nil! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:47'!testRegisterUserLikeToAPostWithoutReactions	"Test donde se registra un like de un usuario a un post sin reacciones del mismo usuario"		question := Question new.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 0.		cuoora registerUserReaction: user post: question reaction: true.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:27'!testCreateUserSuccess	"Test donde se comprueba que se pudo crear un usuario"		self deny: (cuoora registerUser: 'juan@cuoora.com' password: '') equals: nil! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:44'!testGetUserScoreEqualsToZero	"Test donde se verifica que el puntaje de un usuario, el cual no tiene preguntas como tampoco respondio a post de otros usuarios, es igual a cero"		self assert: (cuoora calculateUserScore: user) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:47'!testRegisterUserLikeToAPostWithALike	"Test donde se registra un like de un usuario a un post con un like del mismo usuario"		question := Question new.	cuoora registerUserReaction: user post: question reaction: true.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0.		cuoora registerUserReaction: user post: question reaction: true.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:56'!testDeleteAQuestionWithAnAnswer	"Test donde se elimina una pregunta de un usuario, la cual tiene una respuesta"		topic := Topic new.	question := cuoora createQuestion: '' description: '' colTopics: (OrderedCollection new:1 withAll: topic) user: user.	cuoora createAnswer: '' relatedQuestion: question user: user.		self assert: (user getQuantityQuestions) equals: 1.	self assert: (user getQuantityAnswers) equals: 1.	self assert: (topic getQuantityRelatedQuestions) equals: 1.		cuoora deleteQuestion: question.		self assert: (user getQuantityQuestions) equals: 0.	self assert: (user getQuantityAnswers) equals: 0.	self assert: (topic getQuantityRelatedQuestions) equals: 0! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:42'!testGetUserScoreEqualsToTwentyOne	"Test donde se verifica que el puntaje de un usuario con una pregunta, la cual tiene un like es de 21"		question := Question new.	question addLike: Reaction new.	user addQuestion: question.		self assert: (cuoora calculateUserScore: user) equals: 21! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:46'!testRegisterUserDislikeToAPostWithALike	"Test donde se registra un dislike de un usuario a un post con un like del mismo usuario"	question := Question new.	cuoora registerUserReaction: user post: question reaction: true.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0.		cuoora registerUserReaction: user post: question reaction: false.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 1! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:26'!testCreateQuestionWithoutTopics	"Test donde se verifica que no se puede crear una pregunta sin topicos"	question := cuoora createQuestion: '¬øQu√© es POO?' description: '' colTopics: (OrderedCollection new) user: (User new).		self assert: question equals: nil.! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:37'!testCreateAnswer	"Test donde se crea una respuesta y se verifica que la misma haya sido creada"	answer := cuoora createAnswer: 'Answer' relatedQuestion: (Question new) user: (cuoora userAt: (cuoora getUsers size)).		self deny: answer equals: nil.	self assert: answer text equals: 'Answer'! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:41'!testGetUserScoreEqualsToFifty	"Test donde se verifica que el puntaje de un usuario el cual respondi√≥ a un post de otro es igual a 50"		user addAnswer: (Answer newWith: questionWithAnswer user: user).		self assert: (cuoora calculateUserScore: user) equals: 50! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:40'!testGetUserRelevantQuestionsFromAnUserThatFollows	"Test donde se obtienen las preguntas relevantes de un usuario solo de usuarios a los que sigue"		user := cuoora userAt: 1.	user follow: anotherUser.		self assert: (cuoora getRelevantsQuestionsForUser: user) size equals: 1! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:46'!testRegisterUserDislikeToAPostWithoutReactions	"Test donde se registra un dislike de un usuario a un post con sin reacciones del mismo usuario"		question := Question new.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 0.		cuoora registerUserReaction: user post: question reaction: false.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 1! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:37'!testGetRelatedsTopicsQuestions	"Test donde se obtienen las preguntas relacionadas a un topico"		self assert: ((cuoora getRelatedsQuestionsOfTopic: topic) size) equals: 1.	self assert: (((cuoora getRelatedsQuestionsOfTopic: topic) at: 1) title) equals: '¬øQu√© es Smalltalk?'.! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:40'!testGetUserRelevantQuestionsFromInterestingTopicsAndUsersThatFollows	"Test donde se obtienen las preguntas relevantes de un usuario tanto de topicos de interes como de usuarios a los que sigue"		user := (cuoora userAt: 1).	user addInterestingTopic: topic.	user follow: anotherUser.	topic := (cuoora topicAt: 1).	topic addRelatedQuestion: (Question new).		self assert: (cuoora getRelevantsQuestionsForUser: (cuoora userAt: 1)) size equals: 3! !!TestCuOOra methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 22:38'!testRegisterInterestingTopic	self assert: (user getInterestingTopics size) equals: 0.		cuoora registerTopicInterest: topic user: user.		self assert: (user getInterestingTopics size) equals: 1.! !TestCase subclass: #TestQuestion	instanceVariableNames: 'question answer like dislike user topic'	classVariableNames: ''	package: 'Objetos2-CuOOra-tests'!!TestQuestion methodsFor: 'running'!testAddDislikeToAQuestionWithoutReactions	"Test para agregar un dislike a una pregunta sin reacciones del mismo usuario"		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 0.		question addDislike: dislike.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 1.! !!TestQuestion methodsFor: 'running'!testAddDislikeToAQuestionWithLike	"Test para agregar un dislike a una pregunta con un like del mismo usuario"		question addLike: like.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0.		question addDislike: dislike.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 1.! !!TestQuestion methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:24'!testQuestionScoreEqualsToOne	"Test para obtener el puntaje de una pregunta. Este caso es donde la pregunta tiene un like"		self assert: (question calculateScore) equals: 0.		question addLike: like.		self assert: (question calculateScore) equals: 1	! !!TestQuestion methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/25/2021 14:27'!testIncludesTopic	question addRelatedTopic: topic.		self assert: (question includesTopic: topic)! !!TestQuestion methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:24'!testQuestionScoreEqualsToMinusOne	"Test para obtener el puntaje de una pregunta. Este caso es donde la pregunta tiene un dislike"		self assert: (question calculateScore) equals: 0.		question addDislike: dislike.		self assert: (question calculateScore) equals: -1	! !!TestQuestion methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:20'!testAddAnswer	"Test para agregar unar respuesta a una pregunta, donde la pregunta no tiene respuestas"		self assert: (question getAnswersQuantity) equals: 0.		question addAnswer: answer.		self assert: (question getAnswersQuantity) equals: 1.! !!TestQuestion methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 16:18'!setUp	user := User newWith: 'Pedro' password: ''.		like := Reaction newWith: user type: true.	dislike := Reaction newWith: user type: false.		topic := Topic newWith: 'Smalltalk' description: ''.		question := Question new.		answer := Answer new! !!TestQuestion methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:25'!testQuestionScoreEqualsToZero	"Test para obtener el puntaje de una pregunta. Este caso es donde la pregunta no tiene reacciones"		self assert: (question calculateScore) equals: 0	! !!TestQuestion methodsFor: 'running'!testAddLikeToAQuestionWithDislike	"Test para agregar un like a una pregunta con un dislike del mismo usuario"		question addDislike: dislike.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 1.		question addLike: like.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0.! !!TestQuestion methodsFor: 'running'!testAddLikeToAQuestionWithLike	"Test para agregar un like a una pregunta con un like del mismo usuario"		question addLike: like.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0.		question addLike: like.		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 0.! !!TestQuestion methodsFor: 'running'!testAddLikeToAQuestionWithoutReactions	"Test para agregar un like a una pregunta sin reacciones del mismo usuario"		self assert: (question getNumberOfLikes) equals: 0.	self assert: (question getNumberOfDislikes) equals: 0.		question addLike: like.		self assert: (question getNumberOfLikes) equals: 1.	self assert: (question getNumberOfDislikes) equals: 0.! !!TestQuestion methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 11:16'!testQuestionScoreEqualsToZeroWithTwoReactionsFromDifferentsUsers	"Test para obtener el puntaje de una respuesta. Este caso es donde la respuesta tiene un like y un dislike"	question addLike: like.		dislike := Reaction newWith: User new type: false. 	question addDislike: dislike.		self assert: (question calculateScore) equals: 0	! !TestCase subclass: #TestReaction	instanceVariableNames: 'like dislike'	classVariableNames: ''	package: 'Objetos2-CuOOra-tests'!!TestReaction methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 16:17'!setUp		like := Reaction newWith: (User new) type: true.	dislike := Reaction newWith: (User new) type: false! !!TestReaction methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/25/2021 23:26'!testIsLike	self assert: (like type) equals: true! !!TestReaction methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/25/2021 23:26'!testIsDislike	self assert: (dislike type) equals: false! !TestCase subclass: #TestTopic	instanceVariableNames: 'topic relatedQuestion'	classVariableNames: ''	package: 'Objetos2-CuOOra-tests'!!TestTopic methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 16:15'!testAddRelatedQuestion	self assert: (topic getQuantityRelatedQuestions) equals: 0.	topic addRelatedQuestion: Question new.		self assert: (topic getQuantityRelatedQuestions) equals: 1.! !!TestTopic methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 16:15'!setUp	topic := Topic new.	relatedQuestion := Question new.! !!TestTopic methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 16:15'!testDeleteRelatedQuestion	topic addRelatedQuestion: relatedQuestion.	self assert: (topic getQuantityRelatedQuestions) equals: 1.		topic deleteRelatedQuestion: relatedQuestion.	self assert: (topic getQuantityRelatedQuestions) equals: 0! !TestCase subclass: #TestUser	instanceVariableNames: 'user anotherUser anotherUserQuestion relatedQuestion topicWithRelatedQuestion question'	classVariableNames: ''	package: 'Objetos2-CuOOra-tests'!!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:03'!testAddInterestingTopic	self assert: (user getQuantityInterestingTopics) equals: 0.		user addInterestingTopic: (Topic new).		self assert: (user getQuantityInterestingTopics) equals: 1! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:10'!testFollowUser	self assert: (user getQuantityUsersIFollow) equals: 0.		user follow: anotherUser.		self assert: (user getQuantityUsersIFollow) equals: 1! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:41'!testScoreEqualsToZero	"Test donde se verifica que el puntaje de un usuario es cero, donde el mismo no realizo reguntas, ni respuestas a otros usuarios"		self assert: (user getScore) equals: 0! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:12'!testUnfollowUser	user follow: anotherUser.		self assert: (user getQuantityUsersIFollow) equals: 1.		user unfollow: anotherUser.		self assert: (user getQuantityUsersIFollow) equals: 0! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:43'!testDeleteAnswer	user addAnswer: Answer new.	self assert: (user getQuantityAnswers) equals: 1.		user deleteAnswer: ((user getAnswers) at: 1).	self assert: (user getQuantityAnswers) equals: 0! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:49'!testRelevantQuestionsEqualsToOne	self assert: (user getRelevantQuestions size) equals: 0.		user addInterestingTopic: topicWithRelatedQuestion.		self assert: (user getRelevantQuestions size) equals: 1! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:40'!testScoreEqualsToSeventy	"Test donde se verifica que el puntaje de un usuario es igual a 70, donde el mismo tiene una pregunta realizada, y una respuesta hecha a otro usuario"		self assert: (user getScore) equals: 0.		user addQuestion: Question new.		user addAnswer: (Answer newWith: '' user: user).	anotherUserQuestion addAnswer: ((user getAnswers) at: 1).		self assert: (user getScore) equals: 70! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:41'!testScoreEqualsToTwenty	"Test donde se verifica que el puntaje de un usuario es 20, donde el mismo tiene una pregunta realizada"		self assert: (user getScore) equals: 0.		user addQuestion: Question new.		self assert: (user getScore) equals: 20! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:03'!testAddAnswer	self assert: (user getQuantityAnswers) equals: 0.		user addAnswer: Answer new.		self assert: (user getQuantityAnswers) equals: 1! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/25/2021 23:21'!testRelevantQuestionsEqualsToZero	self assert: (user getRelevantQuestions size) equals: 0! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:51'!setUp	user := User new.		anotherUser := User new.	anotherUserQuestion := Question new.	anotherUser addQuestion: anotherUserQuestion.		relatedQuestion := Question newWith: '' description: '' colRelatedTopics: (OrderedCollection new: 1 withAll: topicWithRelatedQuestion) user: user.		topicWithRelatedQuestion := Topic new.	topicWithRelatedQuestion addRelatedQuestion: relatedQuestion.! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:03'!testAddQuestion	self assert: (user getQuantityQuestions) equals: 0.		user addQuestion: Question new.		self assert: (user getQuantityQuestions) equals: 1! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:40'!testScoreEqualsToNighteen	"Test donde se verifica el puntaje de un usuario donde el mismo tiene una pregunta, la cual tiene un dislike y el puntaje es igual a 19"		self assert: (user getScore) equals: 0.		question := Question new.	user addQuestion: question.	question addDislike: (Reaction new).		self assert: (user getScore) equals: 19! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:40'!testScoreEqualsToFifty	"Test para verificar el puntaje del usuario, tiene una respuesta hecha a otro usuario, donde el puntaje es 50"		self assert: (user getScore) equals: 0.	 	user addAnswer: (Answer newWith: '' user: user).	anotherUserQuestion addAnswer: ((user getAnswers) at: 1).		self assert: (user getScore) equals: 50! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/27/2021 12:41'!testScoreEqualsToTwentyOne	"Test donde se verifica el puntaje de un usuario, el cual es 21, donde el mismo tiene una regunta realizada y la misma tiene un like"		self assert: (user getScore) equals: 0.		question := Question new.	user addQuestion: question.	question addLike: (Reaction new).		self assert: (user getScore) equals: 21! !!TestUser methodsFor: 'running' stamp: 'NicolsJoaqunParisi 4/26/2021 15:44'!testDeleteQuestion	user addQuestion: Question new.	self assert: (user getQuantityQuestions) equals: 1.		user deleteQuestion: ((user getQuestions) at: 1).	self assert: (user getQuantityQuestions) equals: 0! !Object subclass: #CuOOra	instanceVariableNames: 'topics users'	classVariableNames: ''	package: 'Objetos2-CuOOra-model'!!CuOOra methodsFor: 'public'!getUsers	^ users! !!CuOOra methodsFor: 'public'!getUserQuestionsOf: anUser	^ anUser getQuestions! !!CuOOra methodsFor: 'public'!registerUserReaction: anUser post: unaPublicacion reaction: aReaction	| reaction |	reaction := Reaction newWith: anUser type: aReaction.	aReaction		ifTrue: [ unaPublicacion addLike: reaction ]		ifFalse: [ unaPublicacion addDislike: reaction ].	^ reaction! !!CuOOra methodsFor: 'public'!existUserWithName: anUserName	^ self getUsers		detect: [ :u | u username = anUserName ]		ifFound: [ true ]		ifNone: [ false ]! !!CuOOra methodsFor: 'public' stamp: 'NicolsJoaqunParisi 4/25/2021 21:00'!registerTopicInterest: aTopic user: anUser	anUser addInterestingTopic: aTopic! !!CuOOra methodsFor: 'public'!deleteQuestion: aQuestion	aQuestion delete! !!CuOOra methodsFor: 'public'!createQuestion: aTitle description: aDescription colTopics: aColTopics user: anUser	| question |	question := Question		newWith: aTitle		description: aDescription		colRelatedTopics: aColTopics		user: anUser.	anUser addQuestion: question.	aColTopics do: [ :topic | topic addRelatedQuestion: question ].	^ question! !!CuOOra methodsFor: 'public'!calculateUserScore: anUser	^ anUser getScore! !!CuOOra methodsFor: 'public'!getRelatedsQuestionsOfTopic: aTopic	^ aTopic getRelatedQuestions! !!CuOOra methodsFor: 'public'!getUserAnswers: anUser	^ anUser getAnswers! !!CuOOra methodsFor: 'public'!getAnswersToQuestion: aQuestion	^ aQuestion getAnswers		asSortedCollection: [ :answer1 :answer2 | answer1 calculateScore > answer2 calculateScore ]! !!CuOOra methodsFor: 'public'!registerUser: anUser asFollowerOf: anotherUser	anUser follow: anotherUser! !!CuOOra methodsFor: 'public'!registerUser: anUser whoStopFollowTo: anotherUser	anUser unfollow: anotherUser! !!CuOOra methodsFor: 'public'!createAnswer: aText relatedQuestion: aQuestion user: anUser	| answer  |	answer := Answer newWith: aText user: anUser.	aQuestion addAnswer: answer.	anUser addAnswer: answer.	^ answer! !!CuOOra methodsFor: 'public'!getRelevantsQuestionsForUser: anUser	^ anUser getRelevantQuestions! !!CuOOra methodsFor: 'public'!existUserWithName: anUserName password: aPassword	^ self getUsers		detect: [ :u | u username = anUserName & (u password = aPassword) ]		ifNone: [ nil ]! !!CuOOra methodsFor: 'public'!getTopics	^ topics! !!CuOOra methodsFor: 'accesing'!getTopicWithName: aTopicName	^ topics detect: [ :topic | topic name = aTopicName ]! !!CuOOra methodsFor: 'accesing'!getTopicsWithNames: colSelectedTopics	^ colSelectedTopics		collect: [ :topicName | self getTopicWithName: topicName ]! !!CuOOra methodsFor: 'private'!initialize	users := OrderedCollection new.	topics := OrderedCollection new.! !!CuOOra methodsFor: 'private'!initializeWithValues	| topicosPPedro topicosPDiego preguntaPedro preguntaDiego |	"--- Creacion de topicos ---"	self		createTopic: 'OO1'		description: 'Topico relacionada a Orientacion a Objetos 1'.	self		createTopic: 'Test de unidad'		description: 'Topico relacionada a Test de unidad'.	self		createTopic: 'Smalltalk'		description: 'Topico relacionada al lenguaje de programacion Smalltalk'.	"--- Creacion de usuarios ---"	self registerUser: 'pedro@cuoora.com' password: 'pedro@cuoora.com'.	self registerUser: 'diego@cuoora.com' password: 'diego@cuoora.com'.	self registerUser: 'juan@cuoora.com' password: 'juan@cuoora.com'.	"--- Registro de seguidores ---"	"Juan sigue a Diego"	self registerUser: (self userAt: 3) asFollowerOf: (self userAt: 2).	"Pedro sigue a Juan"	self registerUser: (self userAt: 1) asFollowerOf: (self userAt: 3).	"--- Creacion de preguntas ---"	"Pregunta de Pedro"	topicosPPedro := OrderedCollection new.	topicosPPedro add: (self topicAt: 1).	topicosPPedro add: (self topicAt: 2).	preguntaPedro := self		createQuestion: '¬øPara qu√© sirve el m√©todo SetUp?'		description: ''		colTopics: topicosPPedro		user: (self userAt: 3).	"Pregunta de Diego"	topicosPDiego := OrderedCollection new.	topicosPDiego add: (self topicAt: 1).	topicosPDiego add: (self topicAt: 3).	preguntaDiego := self		createQuestion: '¬øQu√© significa #messageNotUnderstood?'		description: ''		colTopics: topicosPDiego		user: (self userAt: 2).	"--- Respuestas ---"	"Respuesta de Diego a la pregunta de Pedro"	self		createAnswer:			'Sirve para instanciar los objetos que son evaluados por el test en un √∫nico m√©todo y que se ejecute siempre antes de cada test.'		relatedQuestion: preguntaPedro		user: (self userAt: 2).	"Respuesta de Pedro a la pregunta de Diego"	self		createAnswer:			' Significa que el objeto que recibi√≥ el mensaje no encontr√≥ ning√∫n m√©todo para ejecutar en respuesta.'		relatedQuestion: preguntaDiego		user: (self userAt: 1)! !!CuOOra methodsFor: 'basic tests'!topicAt: index	^ topics at: index! !!CuOOra methodsFor: 'basic tests'!getQuantityUsers	^ users size! !!CuOOra methodsFor: 'basic tests'!getTopicsQuantity	^ topics size! !!CuOOra methodsFor: 'basic tests'!userAt: index	^ users at: index! !!CuOOra methodsFor: 'basic tests'!usuarioAt: index	^ users at: index! !!CuOOra methodsFor: 'initialization'!createTopic: aName description: aDescription	| topic |	topic := Topic newWith: aName description: aDescription.	topics add: topic.	^ topic! !!CuOOra methodsFor: 'initialization'!registerUser: aUsername password: aPassword	| user |	(self existUserWithName: aUsername)		ifTrue: [ ^ nil ].	user := User newWith: aUsername password: aPassword.	users add: user.	^ user! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'soleInstance'!!CuOOra class methodsFor: 'accessing'!clearSoleInstance	soleInstance := nil! !!CuOOra class methodsFor: 'accessing'!soleInstance	soleInstance ifNil: [ soleInstance := self new. soleInstance initializeWithValues ].	^ soleInstance! !Object subclass: #Post	instanceVariableNames: 'text colLikes colDislikes dateAndTimePost creatorUser'	classVariableNames: ''	package: 'Objetos2-CuOOra-model'!!Post methodsFor: 'initialization'!initialize: aUser	creatorUser := aUser.	dateAndTimePost := DateAndTime now asLocalStringYMDHM.	colLikes := OrderedCollection new.	colDislikes := OrderedCollection new.	^ self! !!Post methodsFor: 'accessing'!getCreatorUsername	^ creatorUser username! !!Post methodsFor: 'accessing'!dateAndTimePost: aDateAndTime	dateAndTimePost := aDateAndTime! !!Post methodsFor: 'accessing'!creatorUser	^ creatorUser! !!Post methodsFor: 'accessing'!getLikes	^ colLikes! !!Post methodsFor: 'accessing'!creatorUser: anUser	creatorUser := anUser! !!Post methodsFor: 'accessing'!dateAndTimePost	^ dateAndTimePost! !!Post methodsFor: 'accessing'!getDislikes	^ colDislikes! !!Post methodsFor: 'basic tests'!getNumberOfLikes	^ colLikes size! !!Post methodsFor: 'basic tests'!getNumberOfDislikes	^ colDislikes size! !!Post methodsFor: 'public'!calculateScore	^ self getLikes size - self getDislikes size! !!Post methodsFor: 'public'!delete	self subclassResponsibility! !!Post methodsFor: 'public'!addLike: aReaction	(self hasLike: aReaction)		ifNotNil: [ colLikes remove: (self hasLike: aReaction).			^ self ].	(self hasDislike: aReaction)		ifNil: [ colLikes add: aReaction ]		ifNotNil: [ colDislikes remove: (self hasDislike: aReaction).			colLikes add: aReaction ]! !!Post methodsFor: 'public'!addDislike: aReaction	(self hasDislike: aReaction)		ifNotNil: [ colDislikes remove: (self hasDislike: aReaction).			^ self ].	(self hasLike: aReaction)		ifNil: [ colDislikes add: aReaction ]		ifNotNil: [ colLikes remove: (self hasLike: aReaction).			colDislikes add: aReaction ]! !!Post methodsFor: 'private'!hasLikeOf: anUsername	colLikes		detect: [ :like | like getCreatorUsername = anUsername ]		ifFound: [ ^ true ]		ifNone: [ ^ false ]! !!Post methodsFor: 'private'!hasDislikeOf: anUsername	colDislikes		detect: [ :dislike | dislike getCreatorUsername = anUsername ]		ifFound: [ ^ true ]		ifNone: [ ^ false ]! !!Post methodsFor: 'private'!hasLike: aReaction	^ self getLikes		detect: [ :r | r getUser == aReaction getUser ]		ifNone: [ nil ]! !!Post methodsFor: 'private'!hasDislike: aReaction	^ self getDislikes		detect: [ :r | r getUser == aReaction getUser ]		ifNone: [ nil ]! !Post subclass: #Answer	instanceVariableNames: ''	classVariableNames: ''	package: 'Objetos2-CuOOra-model'!!Answer methodsFor: 'public'!delete	self creatorUser deleteAnswer: self! !!Answer methodsFor: 'accessing'!text: aText	text := aText! !!Answer methodsFor: 'accessing'!text	^ text! !!Answer methodsFor: 'initialization'!initialize: aText user: anUser	self initialize: anUser.	text := aText.	^ self! !!Answer methodsFor: 'basic tests' stamp: 'NicolsJoaqunParisi 4/25/2021 11:41'!initialize	self initialize: User new.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'rendering'!newWith: aText user: anUser	^ self new initialize: aText user: anUser! !Post subclass: #Question	instanceVariableNames: 'title colRelatedTopics answers'	classVariableNames: ''	package: 'Objetos2-CuOOra-model'!!Question methodsFor: 'basic tests'!answerAt: index	^ answers at: index! !!Question methodsFor: 'basic tests'!topicAt: index	^ colRelatedTopics at: index! !!Question methodsFor: 'basic tests' stamp: 'NicolsJoaqunParisi 4/25/2021 13:39'!initialize	self initialize: User new.	colRelatedTopics := OrderedCollection new.	answers := OrderedCollection new.	^ self! !!Question methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/25/2021 12:25'!delete	creatorUser deleteQuestion: self.	self getRelatedTopics do: [ :t | t deleteRelatedQuestion: self ].	answers do: [ :answer | answer delete ]! !!Question methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/25/2021 12:31'!addRelatedTopic: aTopic	colRelatedTopics add: aTopic! !!Question methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/23/2021 21:19'!description	^ text! !!Question methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/25/2021 12:25'!includesTopic: aTopic	^ self getRelatedTopics includes: aTopic! !!Question methodsFor: 'accessing'!getAnswersQuantity	^ answers size! !!Question methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/25/2021 12:25'!getFormatedTopicsNames	| topicsNames formatedNames |	topicsNames := self getRelatedTopics collect: [ :t | t name ].	formatedNames := String new.	topicsNames		do: [ :name | 			formatedNames := formatedNames , name.			topicsNames last = name				ifTrue: [ formatedNames := formatedNames , '.' ]				ifFalse: [ formatedNames := formatedNames , ', ' ] ].	^ formatedNames! !!Question methodsFor: 'accessing'!title	^ title! !!Question methodsFor: 'accessing'!addAnswer: anAnswer	answers add: anAnswer! !!Question methodsFor: 'accessing'!setRelatedTopics: topics	colRelatedTopics := topics! !!Question methodsFor: 'accessing'!getAnswers	^ answers! !!Question methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/25/2021 12:25'!getRelatedTopics	^ colRelatedTopics! !!Question methodsFor: 'initialization' stamp: 'NicolsJoaqunParisi 4/23/2021 21:19'!initialize: aTitle description: aDescription colRelatedTopics: topics user: anUser	self initialize: anUser.	title := aTitle.	text := aDescription.	colRelatedTopics := topics.	answers := OrderedCollection new.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'rendering'!newWith: aTitle description: aDescription colRelatedTopics: topics user: anUser	topics isNotEmpty		ifTrue: [ ^ self new				initialize: aTitle				description: aDescription				colRelatedTopics: topics				user: anUser ]		ifFalse: [ ^ nil ]! !Object subclass: #Reaction	instanceVariableNames: 'type dateAndTime user'	classVariableNames: ''	package: 'Objetos2-CuOOra-model'!!Reaction methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 01:12'!getCreatorUsername	^ user username! !!Reaction methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 01:11'!getUser	^ user! !!Reaction methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 11:21'!user: aUser	user := aUser! !!Reaction methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 11:09'!dateAndTime	^ dateAndTime! !!Reaction methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 11:10'!dateAndTime: aDateAndTime	dateAndTime := aDateAndTime! !!Reaction methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 11:10'!type: aReactionType	type := aReactionType! !!Reaction methodsFor: 'accessing' stamp: 'NicolsJoaqunParisi 4/11/2021 11:20'!type	^ type! !!Reaction methodsFor: 'initialization' stamp: 'NicolsJoaqunParisi 4/11/2021 01:11'!initialize: aUser type: aType	user := aUser.	type := aType.	dateAndTime := DateAndTime now asLocalStringYMDHM.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Reaction class	instanceVariableNames: ''!!Reaction class methodsFor: 'rendering' stamp: 'NicolsJoaqunParisi 4/11/2021 12:08'!newWith: aUser type: aType	^ self new initialize: aUser type: aType! !Object subclass: #Topic	instanceVariableNames: 'name description relatedQuestions'	classVariableNames: ''	package: 'Objetos2-CuOOra-model'!!Topic methodsFor: 'initialization'!initialize: aTopicName description: aDescription	name := aTopicName.	description := aDescription.	relatedQuestions := OrderedCollection new! !!Topic methodsFor: 'public'!getRelatedQuestions	^ relatedQuestions! !!Topic methodsFor: 'public'!addRelatedQuestion: aQuestion	relatedQuestions add: aQuestion! !!Topic methodsFor: 'public'!deleteRelatedQuestion: unaPregunta	relatedQuestions remove: unaPregunta! !!Topic methodsFor: 'basic tests'!description	^ description! !!Topic methodsFor: 'basic tests'!questionAt: index	^ relatedQuestions at: index! !!Topic methodsFor: 'basic tests' stamp: 'NicolsJoaqunParisi 4/25/2021 23:24'!initialize	relatedQuestions := OrderedCollection new! !!Topic methodsFor: 'basic tests'!name	^ name! !!Topic methodsFor: 'basic tests'!getQuantityRelatedQuestions	^ relatedQuestions size! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'instance creation'!newWith: aTopicName description: aDescription	^ self new initialize: aTopicName description: aDescription! !Object subclass: #User	instanceVariableNames: 'username password colAnswers colQuestions colUsersIFollow dateAndTimeAccount colInterestingTopics'	classVariableNames: ''	package: 'Objetos2-CuOOra-model'!!User methodsFor: 'initialization' stamp: 'NicolsJoaqunParisi 4/25/2021 21:43'!intialize: anUsername password: aPassword	username := anUsername.	password := aPassword.	dateAndTimeAccount := DateAndTime new asLocalStringYMDHM.	self initialize! !!User methodsFor: 'public'!getUsersIFollowQuestions: aCollection	aCollection		addAll: (colUsersIFollow flatCollect: [ :user | user getQuestions ])! !!User methodsFor: 'public'!getRelatedTopicsQuestions: aCollection	aCollection		addAll:			(colInterestingTopics				flatCollect: [ :topic | topic getRelatedQuestions ])! !!User methodsFor: 'public' stamp: 'NicolsJoaqunParisi 4/25/2021 22:04'!getAnswersToAnotherUsers	^ colAnswers reject: [ :answers | answers = self ]! !!User methodsFor: 'public' stamp: 'NicolsJoaqunParisi 4/26/2021 22:36'!getInterestingTopics	^ colInterestingTopics ! !!User methodsFor: 'public'!deleteQuestion: aQuestion	colQuestions remove: aQuestion! !!User methodsFor: 'public' stamp: 'NicolsJoaqunParisi 4/25/2021 21:00'!addInterestingTopic: aTopic	colInterestingTopics add: aTopic! !!User methodsFor: 'public'!unfollow: anUser	colUsersIFollow remove: anUser! !!User methodsFor: 'public'!getQuestions	^ colQuestions ! !!User methodsFor: 'public'!deleteAnswer: anAnswer	colAnswers remove: anAnswer! !!User methodsFor: 'public'!addAnswer: anAnswer	colAnswers add: anAnswer! !!User methodsFor: 'public'!getRelevantQuestions	| relevantQuestions |	relevantQuestions := Set new.	self getRelatedTopicsQuestions: relevantQuestions.	self getUsersIFollowQuestions: relevantQuestions.	^ relevantQuestions asOrderedCollection! !!User methodsFor: 'public'!addQuestion: aQuestion	colQuestions add: aQuestion! !!User methodsFor: 'public'!follow: anUser	colUsersIFollow add: anUser! !!User methodsFor: 'public'!calculatePostScore	^ (colQuestions collect: [ :question | question calculateScore ])		sumNumbers		+			(colAnswers collect: [ :answer | answer calculateScore ])				sumNumbers! !!User methodsFor: 'public'!getAnswers	^ colAnswers ! !!User methodsFor: 'public' stamp: 'NicolsJoaqunParisi 4/25/2021 22:04'!getScore	^ ((colQuestions size) * 20) + ((self getAnswersToAnotherUsers size) * 50) + self calculatePostScore! !!User methodsFor: 'public'!getUsersIFollow	^ colUsersIFollow ! !!User methodsFor: 'basic tests'!questionAt: index	^ colQuestions at: index! !!User methodsFor: 'basic tests' stamp: 'NicolsJoaqunParisi 4/25/2021 20:56'!getQuantityInterestingTopics	^ colInterestingTopics size! !!User methodsFor: 'basic tests' stamp: 'NicolsJoaqunParisi 4/25/2021 21:43'!initialize	colQuestions := OrderedCollection new.	colAnswers := OrderedCollection new.	colInterestingTopics := OrderedCollection new.	colUsersIFollow := OrderedCollection new! !!User methodsFor: 'basic tests'!getQuantityAnswers	^ colAnswers size! !!User methodsFor: 'basic tests'!getQuantityUsersIFollow	^ colUsersIFollow size! !!User methodsFor: 'basic tests'!getQuantityQuestions	^ colQuestions size! !!User methodsFor: 'basic tests'!topicAt: index	^ colInterestingTopics at: index! !!User methodsFor: 'basic tests'!userIFollowAt: index	^ colUsersIFollow at: index! !!User methodsFor: 'basic tests'!answerAt: index	^ colAnswers at: index! !!User methodsFor: 'accessing'!followsAt: anUser	self getUsersIFollow		detect: [ :user | user == anUser ]		ifFound: [ ^ true ]		ifNone: [ ^ false ]! !!User methodsFor: 'accessing'!getLastRelevantQuestions	| questions |	questions := self getRelevantQuestions		sort: [ :q1 :q2 | q1 dateAndTimePost > q2 dateAndTimePost ].	^ questions takeFirst: 5! !!User methodsFor: 'accessing'!password	^ password! !!User methodsFor: 'accessing'!username^username ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance creation'!newWith: anUsername password: aPassword	^ self new intialize: anUsername password: aPassword! !